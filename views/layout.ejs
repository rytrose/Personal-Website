<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================
        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).
        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <link href="https://fonts.googleapis.com/css?family=Numans" rel="stylesheet">
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/custom.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    
  </head>

  <body>

    <div class="navbar navbar-default navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="/">Ryan Rose</a>
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          <li><a href="/bio/">bio</a></li>
          <li><a href="/arrangements/">arrangements</a></li>
          <li><a href="/performances/">performances</a></li>
          <li><a href="/projects/">projects</a></li>
          <% if(session.authenticated) { %>
            <li class="dropdown">
              <a class="dropdown-toggle" data-toggle="dropdown" href="#">admin
              <span class="caret"></span> </a>
              <ul class="dropdown-menu">
                <li><a href="/followers/">followers admin</a></li>
                <li><a href="/file/">files admin</a></li>
                <li><a href="/arrangements/admin/">arrangements admin</a></li>
                <li><a href="/performances/admin/">performances admin</a></li>
              </ul>
            </li>
          <% } %>
        </ul>
        <div class="navbar-right">
          <% if(session.authenticated) { %>
              <a class="btn btn-default navbar-btn navbar-right" href="/session/destroy">sign out admin</a>
          <% } %>
        </div>
        <% if(!session.authenticated) { %>
        <% } %>
      </div>
    </div>
  </div>

    <%- body %>

    <div class="container">
      <hr>
      <footer class="footer">
        <p class="text-center">sails / bootstrap | <a href="/session/new">admin</a></p>
      </footer>
    </div>

    <!--
        Client-side Templates
        ========================
        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.
        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
      Client-side Javascript
      ========================
      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript
    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-3.1.1.min.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/imagesloaded.pkgd.min.js"></script>
    <script src="/js/dependencies/masonry.pkgd.min.js"></script>
    <script src="/js/dependencies/pdfobject.min.js"></script>
    <script src="/js/custom.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
